https://www.geeksforgeeks.org/array-class-in-java/?ref=lbp




Arrays.asList(arr) 


1)it is backed by the array from which you create this , list,  any change to the array will also be visible in list(ie, like a refernce),




2) you can't change the created, list .

if you need to change the list , ie, if you anticipate the need to modify the list (add, remove, etc.), then you'd typically create a new ArrayList or another modifiable list:


List<String> modifiableList = new ArrayList<>(Arrays.asList(array));

3)always try to convert  array of objects(lie wrapper) than primitive types 




When you use Arrays.asList() with a primitive array (like int[], char[], etc.), you won't get the expected behavior. 

Instead of creating a List of each individual primitive, it will treat the entire primitive array as a single element in the list.

The reason is that Arrays.asList() expects varargs of objects (T...), not primitive types. When you pass a primitive array, the whole array is considered as a single object of type int[], char[], etc.

Here's an example to illustrate:

1)array of primitives as list 
____________________________________

int[] intArray = {1, 2, 3, 4, 5};
List<int[]> list = Arrays.asList(intArray);
System.out.println(list.size());  // Outputs: 1




intArray[2] = 7;  // This modifies the original array which the list is pointing to.
// intList.set(0, new int[]{5, 6, 7, 8});  // This will throw an UnsupportedOperationException.





2)array of objects/references  as list 
____________________________________
but if it was array of object that you are trying to convert , you get a list , where each item in the list, is the object  that was in the former array , 

remember in this case also , since list is backed by array , you cant add or remove elements to the list , but can change the the reference that points the object in the list 

eg: String[] stringArray = {"Anna", "Bob", "Charlie", "David"};
List<String> stringList = Arrays.asList(stringArray);

stringList.set(1, "Bill");  // This is valid.
// stringList.add("Eve");  // This will throw an UnsupportedOperationException.

