The array must be sorted before applying binary search. If it's not, the result is undefined (and typically incorrect).
If the array contains multiple elements with the specified value, there's no guarantee which index will be returned.
If the value isn't found, the method returns a value less than 0. This value can be used to determine the insertion point (where the value would be inserted) as -index - 1.




case 1 : target present
_________________________________________________
import java.util.Arrays;


public class Main {
    public static void main(String[] args) {
        int[] numbers = {1, 3, 5, 7, 9};
        int target = 5;

        int index = Arrays.binarySearch(numbers, target);
        
        if (index >= 0) {
            System.out.println("Value found at index: " + index);
        } else {
            System.out.println("Value not found in the array.");
        }
    }
}


/*

op

"Value found at index: 2 
*/


case 2 : target not present 

_________________________________________________
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] numbers = {1, 3, 5, 7, 9};
        int target = 4;

        int index = Arrays.binarySearch(numbers, target);

        if (index >= 0) {
            System.out.println("Value found at index: " + index);
        } else {
            System.out.println("Value not found in the array.");
            int insertionPoint = -index - 1;
            System.out.println("The value would be inserted at index: " + insertionPoint);
        }
    }
}
/*
op 
Value not found in the array.
Returned negative insertion point: -3
The value would be inserted at index: 2

*/
