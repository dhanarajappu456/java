part 1
_______________________________________________________


multiple inheritance , with interface  and diamond problem with the default method in two intefce

when we have same default method in parent interface, confusion arise on which to call, from the implementing class

the resolution to this is :

1) ovveride the default method in the implementing class(must be done )
   inside it spefically call the deful method ,using

  	 interface_name.super.method_name()

2)additionally you can create other non static method inside the implementing class, to call the specific method of the interface.

note: remember not call the  "interface_name.super.method_name()  " main or other static method 


// Java program to demonstrate Multiple Inheritance
// through default methods

// Interface 1
interface PI1 {

	// Default method
	default void show()
	{

		// Print statement if method is called
		// from interface 1
		System.out.println("Default PI1");
	}
}

// Interface 2
interface PI2 {

	// Default method
	default void show()
	{

		// Print statement if method is called
		// from interface 2
		System.out.println("Default PI2");
	}
}

// Main class
// Implementation class code
class Main implements PI1, PI2 {

	// Overriding default show method
	@Override
	public void show()
	{

		// Using super keyword to call the show
		// method of PI1 interface
		PI1.super.show();//Should not be used directly in the main method;

		// Using super keyword to call the show
		// method of PI2 interface
		PI2.super.show();//Should not be used directly in the main method;
	}

	//Method for only executing the show() of PI1
	public void showOfPI1() {
		PI1.super.show();//Should not be used directly in the main method;
	}

	//Method for only executing the show() of PI2
	public void showOfPI2() {
		PI2.super.show(); //Should not be used directly in the main method;
	}

	// Mai driver method
	public static void main(String args[])
	{

		// Creating object of this class in main() method
		Main d = new Main();
		d.show();
		System.out.println("Now Executing showOfPI1() showOfPI2()");
		d.showOfPI1();
		d.showOfPI2();
	}
}
/*

Default PI1
Default PI2
Now Executing showOfPI1() showOfPI2()
Default PI1
Default PI2

*/





part 2
_______________________________________________________
Note: If we remove the implementation of default method from “TestClass”, we get a compiler error.
If there is a diamond through interfaces, then there is no issue if none of the middle interfaces provide implementation of root interface.
If they provide implementation, then implementation can be accessed as above using super keyword.



// Java program to demonstrate How Diamond Problem
// Is Handled in case of Default Methods

// Interface 1
interface GPI {

	// Default method
	default void show()
	{

		// Print statement
		System.out.println("Default GPI");
	}
}

// Interface 2
// Extending the above interface
interface PI1 extends GPI {
}

// Interface 3
// Extending the above interface
interface PI2 extends GPI {
}

// Main class
// Implementation class code
class TestClass implements PI1, PI2 {

	// Main driver method
	public static void main(String args[])
	{

		// Creating object of this class
		// in main() method
		TestClass d = new TestClass();

		// Now calling the function defined in interface 1
		// from whom Interface 2and 3 are deriving
		d.show();
	}
}
/*

Default GPI
*/
