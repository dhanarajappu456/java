In Java, objects are stored in the heap memory, and when you assign one object to another, both variables reference the same object in memory by default. This is known as a shallow copy.

Deep copy, on the other hand, involves creating a new object that is a copy of the original, including copying all nested objects rather than just referencing them. This way, changes made to the new object will not affect the original object and vice versa.



Here's a breakdown of the two:

### 1. Shallow Copy

In a shallow copy, a new object is created, and the non-static fields of the current object are copied to the new object.

If the field is a value type, then a direct value is copied, but if it's a reference type, then the reference is copied, meaning both the original and copied objects reference the same object.

In Java, the default version of the `clone` method creates a shallow copy.




//program  -shallow copy

```java
class Dog implements Cloneable {
    String name;
    Dog(String name) {
        this.name = name;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}

public class Test {
    public static void main(String[] args) throws CloneNotSupportedException {
        Dog aDog = new Dog("Rover");
        Dog sameDog = (Dog) aDog.clone();
        
        System.out.println(aDog.name == sameDog.name); // true, both reference the same string instance 
    }
}
```

### 2. Deep Copy 

In a deep copy, a new object is created and all the fields of the original object are recursively copied to the new object. 

Both the original and the copied objects are entirely independent of each other.

To implement a deep copy, you might need to override the `clone` method and ensure all nested objects are also cloned.




```java
class Dog implements Cloneable {
    String name;
    Collar collar;

    Dog(String name, int collarSize) {
        this.name = name;
        this.collar = new Collar(collarSize);
    }

    public Object clone() throws CloneNotSupportedException {
        Dog clonedDog = (Dog) super.clone();

        clonedDog.collar = (Collar) this.collar.clone(); // Deep copy
        return clonedDog;
    }
}


class Collar implements Cloneable {
    int size;
    Collar(int size) {
        this.size = size;
    }
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }
}

public class Test {
    public static void main(String[] args) throws CloneNotSupportedException {
        Dog aDog = new Dog("Rover", 5);
        Dog clonedDog = (Dog) aDog.clone();
        
        System.out.println(aDog.collar == clonedDog.collar); // false, they're different instances
    }
}
```

In the deep copy example, both `Dog` and `Collar` classes override the `clone` method. When cloning a `Dog`, we explicitly clone its `Collar` as well, ensuring the two `Dog` instances don't share a `Collar` reference.
